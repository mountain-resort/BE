// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id                Int       @id @default(autoincrement())
  firstName         String // 이름
  lastName          String // 성
  email             String    @unique // 이메일
  encryptedPassword String
  mobile            String    @unique // 휴대폰번호
  refreshToken      String? // 리프레시 토큰
  note              String? // 비고
  mileage           Int       @default(20) // 마일리지
  isDeleted         Boolean   @default(false) // 삭제여부
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  review            Review[] // 리뷰
  booking           Booking[] // 예약
  payment           Payment[] // 결제
}

model Admin {
  id                Int            @id @default(autoincrement())
  firstName         String // 이름
  lastName          String // 성
  email             String         @unique
  encryptedPassword String
  mobile            String         @unique // 휴대폰번호
  refreshToken      String? // 리프레시 토큰
  isDeleted         Boolean        @default(false) // 삭제여부
  authority         Authority      @default(NORMAL) // 권한
  createdAt         DateTime       @default(now()) // 생성일
  updatedAt         DateTime       @updatedAt
  category          Category[] // 카테고리  
  announcement      Announcement[] // 공지사항
  faq               Faq[] // 자주묻는질문
}

enum Authority {
  MANAGER
  NORMAL
}

model Package {
  id              Int        @id @default(autoincrement())
  name            String // 패키지명
  description     String // 패키지설명
  promotionPeriod DateTime[] // 프로모션기간
  sleeps          Int // 인원수수
  nights          Int // 숙박일수수
  cost            Int // 가격
  imageUrl        String
  isDeleted       Boolean    @default(false) // 삭제여부
  inclusions      String[] // 포함한 서비스스
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  events     Event[] // 포함된 이벤트
  activities Activity[] // 포함된 활동
}

model Event {
  id               Int        @id @default(autoincrement())
  title            String // 이벤트명 
  description      String // 이벤트설명
  promotionPeriod  DateTime[] // 이벤트기간간
  location         String // 이벤트장소
  maxGroup         Int // 최대참여팀수
  participantGroup Int        @default(0) // 참여팀수
  imageUrl         String
  isDeleted        Boolean    @default(false) // 삭제여부
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  bookings         Booking[]
  packages         Package[]
}

model Dining {
  id           Int      @id @default(autoincrement())
  name         String // 식당명
  description  String // 식당설명
  tradingHours String // 영업시간
  content      String // 식당소개
  location     String // 식당위치
  menuUrl      String // 메뉴 PDF URL
  imageUrl     String // 식당이미지
  isDeleted    Boolean  @default(false) // 삭제여부
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String // 카테고리명
  description String // 카테고리설명
  imageUrl    String
  isDeleted   Boolean    @default(false) // 삭제여부
  createdBy   Admin      @relation(fields: [adminId], references: [id])
  adminId     Int //생성 관리자
  activities  Activity[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Activity {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  imageUrl    String
  isDeleted   Boolean   @default(false) // 삭제여부
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  bookings    Booking[]
  packages    Package[]
}

model Announcement {
  id        Int      @id @default(autoincrement())
  title     String // 공지사항제목
  content   String // 공지사항내용
  fileUrl   String? // 첨부파일URL
  imageUrl  String? // 이미지URL
  isDeleted Boolean  @default(false) // 삭제여부
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy Admin    @relation(fields: [adminId], references: [id])
  adminId   Int // 생성 관리자
}

model Faq {
  id        Int      @id @default(autoincrement())
  question  String // 질문
  answer    String // 답변
  isDeleted Boolean  @default(false) // 삭제여부
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy Admin    @relation(fields: [adminId], references: [id])
  adminId   Int // 생성 관리자
}

model Accommodation {
  id          Int       @id @default(autoincrement())
  name        String // 숙소명
  description String // 숙소설명
  overview    String // 숙소개요
  cost        Int // 가격
  imageUrls   String[] // 숙소이미지
  roomType    RoomType  @default(CABIN) // 객실유형
  option      String // 옵션
  isDeleted   Boolean   @default(false) // 삭제여부
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  rooms       Room[]
  bookings    Booking[]
  reviews     Review[]
}

enum RoomType {
  CABIN
  VILLA
}

model Room {
  id              Int           @id @default(autoincrement())
  name            RoomName      @default(STANDARD) // 객실명
  occupancy       Int // 수용인원
  size            Int // 객실크기
  bedding         String[] // 침구
  isDeleted       Boolean       @default(false) // 삭제여부
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  amenities       Amenity[]
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
  accommodationId Int
}

enum RoomName {
  DELUXE
  STANDARD
}

model Amenity {
  id        Int      @id @default(autoincrement())
  name      String // 편의시설명
  isDeleted Boolean  @default(false) // 삭제여부
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room[]
}

model Review {
  id              Int           @id @default(autoincrement())
  rating          Int // 평점
  comment         String // 리뷰내용
  isDeleted       Boolean       @default(false) // 삭제여부
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isBest          Boolean       @default(false)
  member          Member        @relation(fields: [memberId], references: [id])
  memberId        Int // 작성자
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
  accommodationId Int // 숙소
}

model Booking {
  id              Int           @id @default(autoincrement())
  referenceNumber String        @unique // 예약번호
  name            String // 예약자명
  email           String // 예약자이메일
  date            DateTime[] // 이용날짜
  mileage         Int // 마일리지
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  accommodation   Accommodation @relation(fields: [accommodationId], references: [id])
  accommodationId Int // 숙소
  member          Member?       @relation(fields: [memberId], references: [id])
  memberId        Int? // 작성자
  activities      Activity[]
  events          Event[]
  payment         Payment?
}

model Payment {
  id        Int      @id @default(autoincrement())
  cost      Int // 결제금액
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  member    Member   @relation(fields: [memberId], references: [id])
  memberId  Int // 이용고객객
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId Int      @unique
}
